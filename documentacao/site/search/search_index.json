{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Construindo%20uma%20API%20organizadinha%20em%20Golang%20usando%20Fiber/","title":"Construindo uma API organizadinha em Golang usando Fiber","text":"<p>Nos \u00faltimos tempo brincando com go e apanhando bastante com o sistema de packages dele (aqui cabe um mea-culpa porque \u00e9 um esquema bem legal se bem utilizado) me peguei pensando bastante em qual seria a melhor forma de organizar a API que estava fazendo de estudo.</p> <p>Acabei pegando bastantes exemplos inclusive do reposit\u00f3rio do Fiber e cheguei em um formato que acredito que seja bem leg\u00edvel e f\u00e1cil de adicionar novas funcionalidades.</p> <p><code>**Disclaimer.:** N\u00e3o estou dizendo que esta \u00e9 a melhor forma de se organizar uma API em GoLang mas foi uma que me atendeu e acho que tamb\u00e9m pode atender em muitos casos onde uma API gen\u00e9rica \u00e9 necess\u00e1ria.</code></p>"},{"location":"Construindo%20uma%20API%20organizadinha%20em%20Golang%20usando%20Fiber/#o-que-essa-api-faz","title":"O que essa API faz?","text":"<p>**Link do reposit\u00f3rio</p> <p>Bem essa API foi feita para salvar informa\u00e7\u00f5es sobre livros e tem somente 3 endpoints:</p> <p>GET: Retorna informa\u00e7\u00f5es sobre um livro</p> <p>PUT: Adiciona ou altera informa\u00e7\u00f5es sobre um livro</p> <p>DELETE: Deleta as informa\u00e7\u00f5es de um livro</p> <p>Implementei somente o b\u00e1sico mesmo, e para isso usei como framework o Fiber que mencionei logo acima que tem uma pegada bem parecida com Express.js que eu curti bastante, mas com as vantagens de Golang como menor aloca\u00e7\u00e3o de mem\u00f3ria e uma velocidade tremenda, e os dados est\u00e3o sendo salvos em um Redis o qual \u00e9 poss\u00edvel inicializar usando um docker-compose.</p>"},{"location":"Construindo%20uma%20API%20organizadinha%20em%20Golang%20usando%20Fiber/#estrutura","title":"Estrutura","text":"<pre><code>| api_simples\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 estrutura.png\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 pkg\n\u2502   \u251c\u2500\u2500 configurations\n\u2502   \u2502   \u2514\u2500\u2500 database.go\n\u2502   \u251c\u2500\u2500 entities\n\u2502   \u2502   \u2514\u2500\u2500 book.go\n\u2502   \u251c\u2500\u2500 handlers\n\u2502   \u2502   \u2514\u2500\u2500 book_handler.go\n\u2502   \u251c\u2500\u2500 repositories\n\u2502   \u2502   \u251c\u2500\u2500 book_repository.go\n\u2502   \u2502   \u2514\u2500\u2500 commons.go\n\u2502   \u2514\u2500\u2500 routes\n\u2502       \u251c\u2500\u2500 book_router.go\n\u2502       \u2514\u2500\u2500 routes.go\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Acredito que n\u00e3o fa\u00e7a muito sentido falar somente o que existe em cada pasta, mas sim dizer o porqu\u00ea e o contexto do porque foi feito desta forma, n\u00e3o vou seguir a ordem ali de cima, pois acho que \u00e9 mais f\u00e1cil explicar n\u00e3o seguindo esta ordem, ent\u00e3o vamos l\u00e1:</p> <p>go.mod</p> <pre><code>module github.com/XandeCoding/codigos-de-artigos/golang/api_simples\n\ngo 1.19\n\nrequire (\n    github.com/go-redis/redis/v9 v9.0.0-beta.2\n    github.com/gofiber/fiber/v2 v2.36.0\n)\n</code></pre> <p>Este arquivo me ajuda a resolver v\u00e1rias quest\u00f5es do workspace de go, pois posso criar um reposit\u00f3rio de Go onde eu quiser e isso n\u00e3o me traz um problema, por exemplo, de acessar packages tanto externos quanto locais principalmente locais.</p> <p>Para criar ele somente realizei o comando <code>go mod init</code> com o caminho do projeto no github como argumento que no caso \u00e9 github.com/XandeCoding/codigos-de-artigos/golang/api_simples, n\u00e3o necessariamente \u00e9 necess\u00e1rio por o caminho do github pode ser utilizado somente o nome do projeto que aqui \u00e9 api_simples por exemplo.</p> <p>Como \u00e9 algo p\u00fablico que quero fazer, acho que \u00e9 interessante colocar o caminho inteiro do reposit\u00f3rio, pois caso eu ou outro algu\u00e9m queira usar um arquivo em espec\u00edfico do projeto ele pode somente referenciar o caminho e tudo deve funcionar perfeitamente, pois o caminho inteiro dos outros arquivos m\u00f3dulos est\u00e3o sendo referenciados.</p> <p>pkg e main.go</p> <p>A pasta pkg \u00e9 a pasta onde vou deixar o c\u00f3digo da minha API, ent\u00e3o todas as features est\u00e3o implementadas dentro desta pasta e o main.go \u00e9 somente um arquivo para inicializar a aplica\u00e7\u00e3o e n\u00e3o implementa nada, por isso ela fica de fora, e usada somente para realizar o start na API.</p> <p><code>_main.go:_</code></p> <pre><code>package main\n\nimport (\n    \"github.com/XandeCoding/codigos-de-artigos/golang/api_simples/pkg/routes\"\n    \"github.com/gofiber/fiber/v2\"\n)\n\nfunc main() {\n    app := fiber.New()\n    routes.AddRoutes(app)\n\n    app.Listen(\":3000\")\n}\n</code></pre> <p>pkg/configurations</p> <p>Aqui ficam os arquivos de configura\u00e7\u00e3o, neste caso temos o arquivo_database.go_ que configura o acesso ao banco, mas caso tiv\u00e9ssemos outras configura\u00e7\u00f5es de aplica\u00e7\u00f5es ou de ferramentas que seriam utilizadas por uma ou mais partes da aplica\u00e7\u00e3o isso ficaria aqui como, por exemplo, uma configura\u00e7\u00e3o customizada do fiber ou mesmo capturar as vari\u00e1veis de ambiente que \u00e9 um caso de uso bem comum.</p> <p>pkg/entities</p> <p>Entidades em geral podem ser usadas em v\u00e1rios lugares, principalmente neste caso onde uso tanto para receber o dado no endpoint e fazer o parse quanto nas fun\u00e7\u00f5es de adicionar o dado no banco. Ent\u00e3o colocar em um lugar comum se torna bastante interessante, \u00e9 claro que h\u00e1 estruturas onde os packages s\u00e3o separados por features e temos escopos mais fechados, a\u00ed talvez n\u00e3o fosse interessante esta abordagem que estou usando aqui.</p> <p><code>Exemplo da configura\u00e7\u00e3o de conex\u00e3o com o Redis em _database.go:_</code></p> <pre><code>package configurations\n\nimport \"github.com/go-redis/redis/v9\"\n\nfunc CreateClient() *redis.Client {\n    redisDatabase := redis.NewClient(&amp;redis.Options{\n        Addr: \"localhost:6379\",\n        Password: \"\",\n        DB: 0,\n    })\n\n    return redisDatabase\n}\n</code></pre> <p>pkg/repositores</p> <p>Neste pacote ficam as fun\u00e7\u00f5es que trabalham diretamente com o banco Redis ent\u00e3o nelas eu recebo o dado de um livro no caso a entidade book e tenho fun\u00e7\u00f5es que tanto a inserem, atualizam e a deletam do banco. Caso tivesse outra entidade a ser tratada no banco como por exemplo, library_ onde trataria de dados sobre livrarias, ela seria um arquivo separado onde ficariam somente fun\u00e7\u00f5es relacionadas a estas informa\u00e7\u00f5es.</p> <p><code>Fragmento de *book_repository.go:*</code></p> <pre><code>type Repository struct {\n    database *redis.Client\n}\n\n...\n\nfunc (rdb Repository) GetBook(name string) string {\n    ctx, cancel := getContext()\n    defer cancel()\n    book, _ := rdb.database.Get(ctx, name).Result()\n\n    return book\n}\n</code></pre> <p>pkg/routes</p> <p>Seguindo o exemplo de outras partes da aplica\u00e7\u00e3o separei as rotas por arquivos, mesmo que tenhamos um arquivo routes.go que inicializa estas rotas \u00e9 interessante deixarmos as rotas de determinado recurso separados, pois facilita a leitura e o entendimento de outras pessoas que possam vir a dar manuten\u00e7\u00e3o no c\u00f3digo.</p> <p><code>Parte em que inicializo as rotas em _routes.go:_</code></p> <pre><code>func AddRoutes(app *fiber.App) *fiber.App {\n    bookRouter(app)\n\n    return app\n}\n</code></pre> <p>Algo que curti muito \u00e9 que em book_router.go somente explicitei as rotas, m\u00e9todos e as fun\u00e7\u00f5es que s\u00e3o os chamados handlers que est\u00e3o em outra parte da aplica\u00e7\u00e3o. Outra coisa importante \u00e9 que esta estrutura possibilita que criemos inst\u00e2ncias que podem ser reutilizadas em todos os endpoints deste determinado recurso que no caso foi uma inst\u00e2ncia de conex\u00e3o com o banco Redis.</p> <p><code>Fragmento onde explicito os recursos de _book_router:_</code></p> <pre><code>func bookRouter(app *fiber.App) *fiber.App {\n    bookRepository := repositories.NewRepository()\n\n    app.Get(\"/book/:name\", handlers.GetBookHandler(bookRepository))\n    app.Put(\"/book\", handlers.SetBookHandler(bookRepository))\n    app.Delete(\"/book/:name\", handlers.DeleteBookHandler(bookRepository))\n\n    return app\n}\n</code></pre> <p>pkg/handlers</p> <p>Em handlers deixo as fun\u00e7\u00f5es que v\u00e3o ser chamadas pelos endpoints, por exemplo, o endpoint <code>_PUT: /book_</code> chama a fun\u00e7\u00e3o SetBookHandler que est\u00e1 no arquivo book_handler.go que retorna a fun\u00e7\u00e3o que vai ser chamada quando este recurso for acessado.</p> <p><code>C\u00f3digo da fun\u00e7\u00e3o _SetBookHandler:_</code></p> <pre><code>func SetBookHandler(bookRepository *repositories.Repository) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        book := new(entities.Book)\n        err := c.BodyParser(book)\n\n        if err != nil {\n            message := map[string]string{\"message\": \"Invalid entry data\"}\n            return c.Status(400).JSON(message)\n        }\n\n        book_name_normalized := strings.ReplaceAll(\n            strings.ToLower(book.Name), \" \", \"_\",\n        )\n        key := \"book:\" + book_name_normalized\n        bookRepository.SetBook(key, book)\n        return c.Send(c.Body())\n    }\n}\n</code></pre>"},{"location":"Construindo%20uma%20API%20organizadinha%20em%20Golang%20usando%20Fiber/#pronto","title":"Pronto","text":"<p>Espero ter ajudado com alguns pontos de dificuldade que quando come\u00e7amos uma API principalmente em uma linguagem que n\u00e3o temos tanta intimidade que foi o meu caso pode nos deixar um pouco confusos, mas este foi uma estrutura inicial que curti bastante, mas qualquer coment\u00e1rio ou feedback pode comentar que \u00e9 sempre bom melhorarmos n\u00e3o \u00e9?, at\u00e9 a pr\u00f3xima :wave:</p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/","title":"Criando uma API de p\u00e1ginas est\u00e1ticas b\u00e1sica com Deno \ud83e\udd95","text":"<p>Bom dia! meus caros compatriotas mineradores das profundezas do StackOverflow, esses \u00faltimos dias me veio uma vontade de como bom goiano dar uma sofrida e ao inv\u00e9s de botar Maril\u00eda Mendon\u00e7a preferi mexer com o famoso (ainda \u00e9?) Deno que para minha grata supresa n\u00e3o foi sofrimento nenhum! :laughing:</p> <p>Porque minha surpresa? Primeiro o ecossistema \u00e9 bem simplista e receptivo para novos usu\u00e1rios a toolkit que vem instalada trazem ferramentas como <code>deno fmt</code> que formata o c\u00f3digo de forma autom\u00e1tica e um <code>deno lint</code> que achei sensacional fora que consegui configurar o debug no vscode tranquilamente, outro ponto que gostei bastante foi a standard library ser bem completa e vir com uma tipagem bem rica (sim sou um type junky).</p> <p>Claro que h\u00e1 outros pontos que s\u00e3o os principais diferencias para o seu irm\u00e3o mais velho Node, mas n\u00e3o vamos focar nas rusgas de fam\u00edlia se quiser dar uma olhada a p\u00e1gina inicial deno.land cita alguns outros pontos legais.</p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/#ideia-inicial","title":"Ideia inicial","text":"<p>Bem como objeto de estudo fiz uma API bem simples para testar algumas coisas como a integra\u00e7\u00e3o do TypeScript com arquivos JSX que \u00e9 algo que eu li na documenta\u00e7\u00e3o do Deno e curti bastante, ent\u00e3o tive a ideia de fazer algo s\u00f3 para servir p\u00e1ginas est\u00e1ticas e ponto:thumbsup:, \u00fanico diferencial aqui \u00e9 que usei o m\u00e1ximo poss\u00edvel da standard library.</p> <p>Disclaimer: Olha a ideia n\u00e3o \u00e9 ser perfeito inclusive se tiverem erros por favor me avise :rolling_on_the_floor_laughing: mas tentei deixar o escopo bem fechado porque se n\u00e3o nunca iria terminar o que tinha proposto para mim mesmo e fiquei feliz com o resultado, tinha como fazer mais algumas coisas legais mas \u00e9 aquilo quem n\u00e3o faz deploy de bug em produ\u00e7\u00e3o n\u00e3o se diverte!. (Sim \u00e9 s\u00f3 uma piada, caso esteja se perguntando)</p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/#e-a-aventura-se-inicia","title":"E a aventura se inicia","text":"<p>De in\u00edcio foi bem simples de instalar inclusive foi s\u00f3 um comando que baixava j\u00e1 um script de instala\u00e7\u00e3o e j\u00e1 o executava e pronto j\u00e1 estava com o deno instalado fiz alguns testes e depois configurei para usar o asdf o que n\u00e3o \u00e9 necess\u00e1rio mas eu gosto da ferramenta pela possibilidade de versionar a runtime e pronto com tudo configurado comecei a programar.</p> <p>E come\u00e7ar a botar a m\u00e3o na massa foi algo bem simples, por assim dizer, n\u00e3o \u00e9 necess\u00e1rio dar um init para rodar basta dar um <code>deno run</code> e se tiver algo que ele precise instalar ele baixa na hora da execu\u00e7\u00e3o e adiciona as informa\u00e7\u00f5es da vers\u00e3o em um package-lock.json algo bem semelhante ao que acontece no Node.js, mas de forma mais minimalista, por assim dizer j\u00e1 que n\u00e3o \u00e9 necess\u00e1rio ter um package.json para interagirmos e configurarmos, algo que achei ruim disso \u00e9 que para o meu caso tive que criar um makefile para agilizar um pouco a execu\u00e7\u00e3o vamos falar disso mais \u00e0 frente.</p> <p>Olha aqui eu vou aos pouquinhos e vou explicar alguns detalhes de TypeScript para quem n\u00e3o est\u00e1 muito familiarizado n\u00e3o se perder.</p> <p></p> <p>Bem aqui j\u00e1 come\u00e7am as diferen\u00e7as Deno usa um esquema de import de libs externas via url, isso traz uma coisa \u00f3tima que \u00e9 a possibilidade de usar arquivos independentes da onde estejam da internet se \u00e9 poss\u00edvel fazer o download ele funciona.</p> <p>Neste caso estou importando e j\u00e1 retirando somente a fun\u00e7\u00e3o de serve que vamos usar para iniciar o servidor.</p> <p>Abaixo temos um tipo que explicita qual vai ser o \"formato\" de um objeto de rota, se pararmos para pensar o m\u00ednimo que precisamos para criar uma rota (endpoint para os mais \u00edntimos) \u00e9 ter uma a\u00e7\u00e3o e ter o \"caminho\" para essa a\u00e7\u00e3o ser executada, por exemplo o caminho pode ser um '/index' e a a\u00e7\u00e3o \u00e9 entregar um simples HTML.</p> <p>Criei isso para facilitar para quem for criar uma rota no futuro n\u00e3o ter que adivinhar ou ter que dar uma de detetive para descobrir os dados necess\u00e1rios para uma rota funcional ser criada.</p> <p>Basicamente esse k se refere a chave do objeto e que deve ser string, e essa mesma chave vai receber como valor uma Promise que retorna uma inst\u00e2ncia de response. Tabom ficou meio confuso mas basicamente eu vou ter um objeto JSON que s\u00f3 recebe chaves em texto como letras e frases e elas v\u00e3o ter como valor uma fun\u00e7\u00e3o ass\u00edncrona que retorna a resposta para o cliente, isso vai ficar mais claro mais a frente.</p> <p>Agora vamos fazer o core da nossa aplica\u00e7\u00e3o que \u00e9 o que vai receber as chamadas e encaminhar para as rotas certas.</p> <p></p> <p>Bem vou me aprofundar mais na fun\u00e7\u00e3o initServerHandler nela eu filtro os m\u00e9todos como vou somente servir p\u00e1ginas est\u00e1ticas quero receber somente chamadas do tipo 'GET', depois eu crio uma url isso \u00e9 legal para poder pegar o pathname que o caminho, por exemplo, se eu colocar no meu navegador o endere\u00e7o https://localhost:7000/teste o pathname \u00e9 /teste isso \u00e9 uma abordagem bem simplista, mas para nosso caso serve muito bem.</p> <p>Lembra da nossa declara\u00e7\u00e3o IRoute aqui que come\u00e7a a brincadeira vamos acessar de forma direta a rota e j\u00e1 vamos executar a fun\u00e7\u00e3o que est\u00e1 salva nela, por exemplo, em um objeto como o abaixo:</p> <pre><code>\n{\n\n'/': async () =&gt;  new  Response('Hello World')\n\n}\n\n</code></pre> <p>Ao entrar na chave '/' ele me traz a fun\u00e7\u00e3o que mostra um Hello World bem bonito para o usu\u00e1rio.</p> <p>Agora mais abaixo temos a fun\u00e7\u00e3o serve nela que a brincadeira j\u00e1 come\u00e7a a rolar, ela inicia a fun\u00e7\u00e3o initServerHandler e faz um bind? O que seria esse tal de bind?</p> <p>Bem para entendermos isso precisamos pensar em como essa fun\u00e7\u00e3o vai ser executada, pois, essa fun\u00e7\u00e3o ela vai ser entregue para o server, mas n\u00e3o ir\u00e1 ser executada ali, mas quando ele receber uma requisi\u00e7\u00e3o e isso ocorre dentro de outro escopo e n\u00e3o na fun\u00e7\u00e3o serve, e nessa altura como a fun\u00e7\u00e3o vai achar a inst\u00e2ncia de HTTPServer com as rotas se ele \u00e9 somente uma fun\u00e7\u00e3o que foi passada para outro escopo? Para isso usamos o bind ele insere a propriedade routes que foi colocada na classe no momento da cria\u00e7\u00e3o da instancia\u00e7\u00e3o do HTTPServer que criamos e a deixa acess\u00edvel dentro dela quase como se ela fosse um \"par\u00e2metro\", mas \u00e9 acessada como uma propriedade da fun\u00e7\u00e3o, por isso quando damos um this.routes conseguimos acessar as rotas, ele acessa a propriedade routes da fun\u00e7\u00e3o e n\u00e3o da classe HTTPServer.</p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/#e-a-aventura-estava-ficando-sem-fim","title":"E a aventura estava ficando sem fim","text":"<p>Essa brincadeira estava at\u00e9 bem divertida, mas eu j\u00e1 tinha tido ido o suficiente adentro da toca do coelho e estava satisfeito (Mundo de Alice vibes :leaves:). Ent\u00e3o fiz uma fun\u00e7\u00e3o para renderizar HTML puro e arquivos JSX, bem arquivos HTML n\u00e3o tem muito segredo ent\u00e3o vamos dar uma olhada em como fazer isso usando JSX.</p> <p>Algo que n\u00e3o sabia era que Typescript estava dando suporte nativo para JSX isso significa que podemos com algumas configura\u00e7\u00f5es importar estes arquivos e us\u00e1-los para renderizar p\u00e1ginas para nossos clientes.</p> <p>Para isso precisamos fazer uma pequena configura\u00e7\u00e3o no nosso arquivo <code>tsconfig.json</code> o meu ficou dessa forma.</p> <p></p> <ul> <li> <p>O <code>jsx</code> se refere a como o arquivo JSX vai ser constru\u00eddo ao ser importado, essa config <code>react-jsx</code> permite que usemos outra runtime, nesse caso estamos usando o Preact como vamos ver abaixo</p> </li> <li> <p><code>jsxImportSource</code> Essa propriedade em conjunto com a op\u00e7\u00e3o acima define qual vai ser o m\u00f3dulo que vai ser usado para importar o JSX e construir o componente ao ser exportado.</p> </li> </ul> <p>Agora temos a fun\u00e7\u00e3o que importa o arquivo JSX de forma gen\u00e9rica (n\u00e3o queremos ter que criar uma fun\u00e7\u00e3o para cada JSX que criemos n\u00e3o \u00e9?)</p> <p></p> <p>N\u00e3o vou me apegar muito os detalhes de import ou da tipagem dos tipos, pois isso n\u00e3o \u00e9 a m\u00e1gica (e j\u00e1 conversamos sobre esse Record mais acima tamb\u00e9m). O que ela faz \u00e9 basicamente importar o arquivo e usar uma fun\u00e7\u00e3o de render do Preact e aqui est\u00e1 a m\u00e1gica.</p> <ul> <li> <p>Primeiro importamos a lib <code>preact-render-to-string</code> do cdn skypack ele tem bastante libs j\u00e1 configuradas para rodar no Deno, muita coisa que roda no Node funciona no Deno, mas algumas precisam de altera\u00e7\u00e3o principalmente as que fazem opera\u00e7\u00f5es no disco, ent\u00e3o j\u00e1 ter algo configurado facilita bastante.</p> </li> <li> <p>Mas na fun\u00e7\u00e3o n\u00f3s importamos o componente de forma ass\u00edncrona (legal n\u00e9? JavaScript \u00e0s vezes nos proporciona essas boas surpresas :the_horns:), quando esse arquivo \u00e9 importado a fun\u00e7\u00e3o j\u00e1 passa por uma transforma\u00e7\u00e3o usando o Preact que configuramos mais cedo e se torna um arquivo utiliz\u00e1vel dentro do nosso c\u00f3digo, n\u00e3o se esque\u00e7a que TypeScript transforma tudo em JavaScript antes de ser executado o JSX s\u00f3 passa por um processo um pouco diferente.</p> </li> </ul> <p></p> <ul> <li>Este arquivo acima \u00e9 um componente que criei bem simples somente para demonstrar, veja que estou exportando ele como default isso ajuda na hora de importar na fun\u00e7\u00e3o acima, pois j\u00e1 sei bem onde acessar o componente no m\u00f3dulo.</li> </ul> <p></p> <ul> <li> <p>Com essa fun\u00e7\u00e3o de renderiza\u00e7\u00e3o podemos j\u00e1 us\u00e1-la no nosso handler e nele o arquivo \u00e9 renderizado e adicionado um headers e uma response v\u00e1lida \u00e9 retornada (sim algumas coisas s\u00e3o bem chatas quando n\u00e3o se usa um framework :cry:)</p> </li> <li> <p>E para utilizarmos este handler basta configurarmos a nossa rota, lembra do nosso HTTPServer vamos brincar com ele agora, mas n\u00e3o tem muita emo\u00e7\u00e3o (felizmente).</p> </li> </ul> <p></p> <p>Se voc\u00ea tem uma mem\u00f3ria boa (ou somente rolou a p\u00e1gina para cima \ud83e\udd37) vai lembrar da interface que o nosso <code>HTTPServer</code> recebe, basta mandar a rota e o handler que \u00e9 a fun\u00e7\u00e3o que executa a a\u00e7\u00e3o ao acessamos aquele endpoint e depois usarmos a fun\u00e7\u00e3o serve.</p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/#executando","title":"Executando","text":"<p>Para executar h\u00e1 um diferencial, Deno pede (insiste melhor dizendo) que voc\u00ea especifique as permiss\u00f5es que a aplica\u00e7\u00e3o dever\u00e1 ter no nosso caso, \u00e9 necess\u00e1rio a de net, pois \u00e9 uma API web acho que est\u00e1 explicito o porque (ela precisa acessar a rede) e de read pois vamos ler alguns arquivos.</p> <p>Um ponto interessante \u00e9 que se fossemos usar somente o import comum n\u00e3o precisar\u00edamos, pois o mesmo j\u00e1 estaria incluso na hora que rod\u00e1ssemos a aplica\u00e7\u00e3o, mas como os arquivos que cont\u00e9m os componentes JSX s\u00e3o importados de forma ass\u00edncrona sendo lidos em tempo de execu\u00e7\u00e3o, ele precisa que demos permiss\u00e3o, pois n\u00e3o \u00e9 adicionado na hora que compilamos mas depois ou nunca depende se vamos acessar a rota que usa o componente.</p> <p>Segue abaixo o c\u00f3digo para executar o brinquedo.</p> <p><code>deno run --config tsconfig.json --allow-net --allow-read ./src/main.ts</code></p>"},{"location":"Criando%20uma%20API%20de%20p%C3%A1ginas%20est%C3%A1ticas%20b%C3%A1sica%20com%20Deno%20%F0%9F%A6%95/#depois-de-20-mil-leguas-submarinas","title":"Depois de 20 mil l\u00e9guas submarinas","text":"<p>Chegamos ao final espero que n\u00e3o tenha sido uma viagem para o mundo da Chatol\u00e2ndia a leitura desse texto, mas sim uma olhada pelo retrovisor ap\u00f3s o hype do Deno passar de seu ecossistema e de algumas diferen\u00e7as do seu irm\u00e3o mais velho Node.js. \ud83d\udc4b\ud83d\udc4b\ud83d\udc4b</p>"},{"location":"Documenta%C3%A7%C3%A3o%20Autom%C3%A1tica%20usando%20MkDocs%20e%20Python/","title":"Documenta\u00e7\u00e3o Autom\u00e1tica usando MkDocs e Python","text":"<p>Algo que curto muito \u00e9 ficar navegando na documenta\u00e7\u00e3o de libs sinceramente uma documenta\u00e7\u00e3o \u00e9 algo que acho lindo de se ver e tamb\u00e9m dif\u00edcil de manter :sweat_smile:.</p> <p>Imagine toda vez que seja feita alguma altera\u00e7\u00e3o em um comportamento de algo ir \u00e0 p\u00e1gina que explica fazer um copy paste do c\u00f3digo, escrever o que ela faz agora, fazer o build, checar se est\u00e1 tudo certo, \u00eapa n\u00e3o era pra ficar assim... eu j\u00e1 cansei s\u00f3 de imaginar :triumph:</p> <p>Para facilitar isso existem algumas ferramentas como o MkDocs que facilitam bastante e nos ajudam a automatizar algumas tarefas chatas, nesse artigo vou escrever um pouco do que e como usei para fazer uma documenta\u00e7\u00e3o de uma ferramenta Python, mas um ponto importante disso tudo \u00e9 que MkDocs \u00e9 agn\u00f3stico de linguagem ent\u00e3o pode ser feito com outras linguagens tamb\u00e9m s\u00f3 dar uma olhadinha na documenta\u00e7\u00e3o deles!</p>"},{"location":"Documenta%C3%A7%C3%A3o%20Autom%C3%A1tica%20usando%20MkDocs%20e%20Python/#ferramenta-a-ser-documentada-beetle","title":"Ferramenta a ser documentada :beetle:","text":"<p>Fiz uma ferramenta bem simples que realiza uma chamada na PokeAPI e pega informa\u00e7\u00f5es relacionadas a um pok\u00e9mon e mostra no terminal.</p> <p>O c\u00f3digo-fonte pode ser encontrado aqui: Documenta\u00e7\u00e3o autom\u00e1tica</p> <p>Falando um pouco mais do projeto usei o poetry para gerenciar o ambiente virtual e deixar as libs que instalei isoladas do resto do sistema, ningu\u00e9m quer ficar entulhando o pc com um monte de libs n\u00e3o \u00e9 mesmo, mas voc\u00ea pode usar qualquer outra como pyenv, virtualenvwrapper \u00e9 algo indiferente.</p> <p>Bem as libs que instalei est\u00e3o no <code>pyproject.toml</code> e no <code>requirements.txt</code> ent\u00e3o \u00e9 s\u00f3 instalar (um pip install -r requirements.txt deve funcionar) e come\u00e7ar a brincar.</p>"},{"location":"Documenta%C3%A7%C3%A3o%20Autom%C3%A1tica%20usando%20MkDocs%20e%20Python/#como-documentar-writing_hand","title":"Como documentar :writing_hand:","text":"<p>Esse \u00e9 um pedacinho do c\u00f3digo que vou usar como exemplo para explicar para voc\u00eas, bem j\u00e1 deve ter reparado nessas <code>\"\"\"</code> elas s\u00e3o Docstrings s\u00e3o usadas para documentar o c\u00f3digo e \u00e9 uma conven\u00e7\u00e3o bastante usada, para documentar m\u00f3dulos, classes, fun\u00e7\u00f5es bem de qualquer forma se for documentar algo recomendo usar :stuck_out_tongue_winking_eye: .</p> <p>Essas docstrings que v\u00e3o realizar a m\u00e1gica vamos fazer com que elas sejam lidas de forma autom\u00e1tica e inseridas na respectiva p\u00e1gina de documenta\u00e7\u00e3o do m\u00f3dulo. Bem com as docstrings inseridas e explicando o que cada fun\u00e7\u00e3o faz, vamos para prosseguir.</p>"},{"location":"Documenta%C3%A7%C3%A3o%20Autom%C3%A1tica%20usando%20MkDocs%20e%20Python/#instalando-o-mkdocs-arrow_up","title":"Instalando o MkDocs :arrow_up:","text":"<p>Para instalar usando o Poetry \u00e9 bastante f\u00e1cil basta usar um poetry add ou pip install caso n\u00e3o esteja o usando.</p> <p></p> <p>Bem instalamos o mkdocs, um tema para deixar a documenta\u00e7\u00e3o mais bonita mkdocs-material isso \u00e9 quest\u00e3o de gosto no caso eu gosto muito, mas tem outros temas caso tenha interesse segue link com mais informa\u00e7\u00f5es temas de MkDocs. E por \u00faltimo temos o mkdocstrings ele \u00e9 um plugin que percorre nosso projeto e insere as docstrings encontradas dentro de nossas p\u00e1ginas.</p> <p>Mas bem com as libs instaladas, o que fazemos agora? :thinking: n\u00e3o precisa mandar uma carta para o Caldeir\u00e3o do Hulk \u00e9 bem mais simples que isso :joy:, seguindo o passo a passo logo voc\u00ea vai ter sua documenta\u00e7\u00e3o pronta.</p> <p>1 - Abra um terminal dentro da pasta do projeto e use o comando <code>mkdocs new .</code>, isso vai fazer com que os arquivos de configura\u00e7\u00e3o e a pasta docs sejam criadas.</p> <p>2 - Neste momento voc\u00ea j\u00e1 deve ter um arquivo chamado <code>mkdocs.yml</code> na raiz do seu projeto nele adicione as seguintes configura\u00e7\u00f5es.</p> <pre><code>site_name: Documenta\u00e7\u00e3o Autom\u00e1tica # Pode ser usado o nome da sua aplica\u00e7\u00e3o\ntheme:\n  name: material # Adiciona o tema bonitinho\nplugins:\n- search # Plugin que possibilita buscas pela documenta\u00e7\u00e3o\n- mkdocstrings: # Esse que faz a m\u00e1gica, mais informa\u00e7\u00f5es abaixo\n    handlers:\n      python:\n        setup_commands:\n          - import sys\n          - sys.path.append(\"src\")\n    watch: # Live-reload para os mais \u00edntimos - mais informa\u00e7\u00f5es abaixo tamb\u00e9m\n      - src\n</code></pre> <p>Obs.: Sim, adicionei o c\u00f3digo meio feio, mas assim voc\u00ea pode s\u00f3 copiar e colar, minha pregui\u00e7a sa\u00fada a sua :open_hands:</p> <ul> <li> <p>mkdocstrings: Como j\u00e1 comentei ele que l\u00ea as docstrings e adiciona na respectiva p\u00e1gina que \u00e9 relacionada com o m\u00f3dulo, mas j\u00e1 vamos ver como usar. De resto adicionei um c\u00f3digo Python (sim ele aceita algumas fun\u00e7\u00f5es python na configura\u00e7\u00e3o) para que a pasta <code>src</code> que \u00e9 a que est\u00e1 o meu c\u00f3digo seja reconhecido pela ferramenta, caso alguma pasta sua n\u00e3o seja reconhecida assim como a minha, esse \u00e9 o caminho, basta adicionar ali e pronto.</p> </li> <li> <p>watch: Isso faz com que ao realizar uma altera\u00e7\u00e3o no c\u00f3digo a mesma seja atualizada para que a documenta\u00e7\u00e3o esteja sincronizada com o c\u00f3digo tanto altera\u00e7\u00f5es no c\u00f3digo quanto nas docstrings habilitam o reload da p\u00e1gina, no caso adicionei a pasta onde est\u00e1 a minha aplica\u00e7\u00e3o, inclusive muito legal escrever a doc e j\u00e1 ver a mesma sendo inserida na p\u00e1gina.</p> </li> </ul> <p>3 - Execute <code>mkdocs build</code> e depois <code>mkdocs serve</code> e ele vai deixar a sua doc access\u00edvel pelo navegador pela url <code>http://127.0.0.1:8000/</code>. Voc\u00ea deve ter algo parecido com isso abaixo.</p> <p></p> <p>4 - Ao acessar voc\u00ea vai ter uma pequena introdu\u00e7\u00e3o de como adicionar p\u00e1ginas, mas \u00e9 muito simples basta criar um arquivo .md dentro da pasta docs que est\u00e1 na raiz do seu projeto e a mesma j\u00e1 \u00e9 adicionada na estrutura da documenta\u00e7\u00e3o. Se est\u00e1 tudo indo certo voc\u00ea vai ter uma estrutura parecida com essa abaixo, foco na pasta docs.</p> <p></p> <p>5 - Vamos atacar a p\u00e1gina pokemon ela que vou usar para documentar o meu m\u00f3dulo pokem\u00f3n que vimos no \u00ednicio.</p> <p></p> <ul> <li>Temos uma pequena introdu\u00e7\u00e3o do que se trata aquela p\u00e1gina e logo ap\u00f3s vemos um <code>::: src.pokemon</code> mas do que se trata isso. Bem ele que mapeia o arquivo que ser\u00e1 inserido de forma autom\u00e1tica e partir dali \u00e9 inserido a doc usando o caminho do arquivo (m\u00f3dulo se preferir) que est\u00e1 na pasta src \u00e9 a mesma sintaxe do import, n\u00e3o acredita que funcionou? Olha o resultado a\u00ed em baixo!</li> </ul> <p></p> <p>6 - Aproveite :grin:</p>"},{"location":"Documenta%C3%A7%C3%A3o%20Autom%C3%A1tica%20usando%20MkDocs%20e%20Python/#fim","title":"Fim","text":"<p>Em alguns passos j\u00e1 temos uma doc bem legal e caso tenhamos mais um m\u00f3dulo ou seja necess\u00e1rio adicionar mais uma p\u00e1gina \u00e9 bem simples \u00e9 s\u00f3 criar na pasta docs e est\u00e1 feito. Espero que tenha gostado e qualquer d\u00favida (ou se achou alguma coisa errada, acontece nas melhoras fam\u00edlias) s\u00f3 mandar um coment\u00e1rio logo abaixo!</p>"}]}